(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = /*#__PURE__*/function () {
  function Common() {
    _classCallCheck(this, Common);
  }

  _createClass(Common, [{
    key: "init",
    value: function init() {
      this.scrollWindow();
      this.contactForm();

      if ($('body').hasClass('home-page') && $(window).innerWidth() >= 1024) {
        this.hoverServ();
        this.whyWeAnim();
      }

      if ($('body').hasClass('projects-page') && $(window).innerWidth() >= 1024) {
        this.projectsPageAnim();
      }

      if ($('body').hasClass('team-page')) {
        this.countAnim();
      }

      this.thanksCtrl();
      this.cookieCtrl();
    }
  }, {
    key: "scrollWindow",
    value: function scrollWindow() {
      $(window).scroll(function () {
        // console.log($(window).scrollTop())
        if ($(window).scrollTop() > 150) {
          $('body').addClass('scroll');
        } else {
          $('body').removeClass('scroll');
        }
      });
    }
  }, {
    key: "thanksCtrl",
    value: function thanksCtrl() {
      $(".popup .popup__close").on('click', function () {
        $(this).closest(".popup").removeClass('active');
        $('body').removeClass('hidden');
      });
    }
  }, {
    key: "hoverServ",
    value: function hoverServ() {
      $('.solutions').on('mouseenter', function () {
        $('.solutions__fixed-img').addClass('fixed');
      });
      $('.solutions__link').on('mouseover', function () {
        var parent = $(this).parent('.solutions__item');
        var url = parent.attr('data-img');
        $('.solutions__item').removeClass('active');
        parent.addClass('active');
        setTimeout(function () {
          $('.solutions__fixed-img').addClass('active');
          $('.solutions__fixed-img div').css('background-image', 'url(' + url + ')');
        }, 200);
      });
      $('.solutions__link').on('mouseout', function () {
        $('.solutions__fixed-img').removeClass('active');
      });
      $('.solutions').on('mouseleave', function () {
        $('.solutions__fixed-img').removeClass('active');
        setTimeout(function () {
          $('.solutions__fixed-img').removeClass('fixed');
          $('.solutions__fixed-img div').css('background-image', 'none');
        }, 300);
      });
      $('.about, .why-we__anim').on('mouseover', function () {
        $('.solutions__fixed-img').removeClass('active');
        setTimeout(function () {
          $('.solutions__fixed-img').removeClass('fixed');
          $('.solutions__fixed-img div').css('background-image', 'none');
        }, 300);
      });
    }
  }, {
    key: "whyWeAnim",
    value: function whyWeAnim() {
      var positionFunc = function positionFunc() {
        var topBlockH = $('.scrollable-top').height();
        var headerH = $('.scrollable-top').height();
        var fixedBlockH = $('.why-we__fixed').height();
        var scrollTop = $(window).scrollTop();
        var windH = window.innerHeight; // console.log(topBlockH, scrollTop);

        if (scrollTop >= topBlockH - (windH - fixedBlockH) + 20) {
          $('.why-we__fixed').addClass('static');
        } else {
          $('.why-we__fixed').removeClass('static');
        }

        if (scrollTop >= windH) {
          $('.why-we__fixed').addClass('show');
        } else {
          $('.why-we__fixed').removeClass('show');
        } // OUR TEAM ANIMATION


        var parentOffset = $('.team').offset().top;

        if (scrollTop >= parentOffset - 30) {
          if (scrollTop < parentOffset + windH * 3 + 30) {
            $('.team__static').addClass('fixed');
            $('.team__static').removeClass('absolute');
            $('.team__inner').removeClass('show');
            var zoomPercent = (scrollTop - parentOffset) / (windH * 3 / 100);

            if (zoomPercent > 10 && zoomPercent < 80) {
              $('.team__anim-img').css({
                "width": 100 + 3 * zoomPercent + "%",
                "height": 100 + 3 * zoomPercent + "%",
                "opacity": zoomPercent > 50 ? 1.75 - zoomPercent / 50 : 1
              });
            }

            if (zoomPercent > 50) {
              $('.team__inner').addClass('show');
            }
          } else {
            $('.team__static').removeClass('fixed');
            $('.team__static').addClass('absolute');
            $('.team__inner').addClass('show');
            $('.team__anim-img').css({
              "opacity": 0
            });
          }
        } else {
          $('.team__static').removeClass('fixed');
          $('.team__static').removeClass('absolute');
          $('.team__inner').removeClass('show');
          $('.team__anim-img').css({
            "width": 100 + "%",
            "height": 100 + "%",
            "opacity": 1
          });
        }
      };

      $(window).scroll(function (e) {
        positionFunc();
      });
      positionFunc();
    }
  }, {
    key: "contactForm",
    value: function contactForm() {
      $('[data-contact]').on('click', function (e) {
        e.preventDefault();
        $('.contact-form').addClass('show');

        if ($(this).hasClass('btn_header')) {
          $('body').addClass('cf-open');
        }
      });
      $('.contact-form__back').on('click', function (e) {
        e.preventDefault();
        $('.contact-form').removeClass('show');
        $('body').removeClass('cf-open');
      });
    }
  }, {
    key: "projectsPageAnim",
    value: function projectsPageAnim() {
      $('.projects .item').on('mouseover', function () {
        var url = $(this).attr('data-bg');
        $('.projects__bg-img').addClass('active'); // setTimeout(function(){

        $('.projects__bg-img').css('background-image', 'url(' + url + ')'); // }, 200);
      });
      $('.projects .item').on('mouseleave', function () {
        $('.projects__bg-img').removeClass('active');
      });
    }
  }, {
    key: "countAnim",
    value: function countAnim() {
      function counter() {
        $('.num-info__num span').each(function () {
          $(this).prop('Counter', 0).animate({
            Counter: $(this).data('value')
          }, {
            duration: 1000,
            easing: 'swing',
            step: function step(now) {
              $(this).text(this.Counter.toFixed(0));
            }
          });
        });
        $('.num-info').attr('data-counted', true);
      }

      $(window).scroll(function () {
        var top_of_element = $(".num-info").offset().top;
        var bottom_of_element = $(".num-info").offset().top + $(".num-info").outerHeight();
        var bottom_of_screen = $(window).scrollTop() + $(window).innerHeight();
        var top_of_screen = $(window).scrollTop();

        if (!$('.num-info').data('counted') && bottom_of_screen > top_of_element && top_of_screen < bottom_of_element) {
          counter(); // $(window).off('scroll');
        }
      });
    }
  }, {
    key: "cookieCtrl",
    value: function cookieCtrl() {
      var cookie = $(".cookie_bar");

      if (localStorage.getItem("monami_cookies") === null) {
        cookie.addClass("active");

        if (cookie.length) {
          cookie.click(function (event) {
            event.stopPropagation();
          });
          cookie.find(".cookie_close_btn").click(function (event) {
            event.preventDefault();
            cookie.removeClass("active");
            localStorage.setItem("monami_cookies", "checked");
          });
        }
      } else {
        if (cookie.length) {
          cookie.remove();
        }
      }

      $('[data-ppopen]').on('click', function (e) {
        e.preventDefault();
        $('body').addClass('hidden');
        $('.popup_privacy-policy').addClass('active');
      });
    }
  }]);

  return Common;
}();

},{}],2:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = /*#__PURE__*/function () {
  function ValidForm(form) {
    _classCallCheck(this, ValidForm);

    this.form = $(form);
  }

  _createClass(ValidForm, [{
    key: "init",
    value: function init() {
      this.start();
      this.events();
    }
  }, {
    key: "start",
    value: function start() {
      var form = this.form;
      var input = form.find('.form-item input');
      var select = form.find('.form-item select');

      if (jQuery().inputmask) {
        var tel = $('input[type="tel"], .tel');
        if (tel.length == 0) return;
        tel.inputmask("+38 (999) (999 99 99)", {
          showMaskOnHover: false
        });
      }

      for (var i = 0; i < select.length; i++) {
        if (select[i].options[select[i].selectedIndex].text) {
          var parent = $(select[i]).closest('.form-item');
          parent.addClass('active');
        }
      }

      ;

      for (var i = 0; i < input.length; i++) {
        if (input[i].value) {
          $(input[i]).closest('.form-item').addClass('active');
        }
      }

      ;
    }
  }, {
    key: "events",
    value: function events() {
      var form = this.form;
      var validItem = form.find('.valid');
      var self = this;
      form.on('click', '[type="submit"]', function (e) {
        var btn = $(this);
        var form = btn.closest('form');

        if (!self.validInput(form)) {
          e.preventDefault();
        } else {
          //	e.preventDefault();
          if (form.hasClass('ajax')) {
            self.sendAjax(form);
          } else {
            self.thankForm(form, function () {
              form.submit();
            });
          }
        }
      });
      form.on('focus', 'input, textarea', function () {
        $(this).closest('.valid').removeClass('error');
      });
      form.on('blur', 'input, textarea', self.checkLengthInput);
      this.checkSelect(form);

      if (!$('#agree').is(":checked")) {
        $('.send-form .form-action').addClass('disabled');
      }

      $('#agree').on('change', function () {
        if (!$(this).is(":checked")) {
          $('.send-form .form-action').addClass('disabled');
        } else {
          $('.send-form .form-action').removeClass('disabled');
        }
      });
    }
  }, {
    key: "checkLengthInput",
    value: function checkLengthInput() {
      var input = $(this);
      var parent = input.closest('.form-item');

      if (input.val().length > 0) {
        parent.addClass('active');
      } else {
        parent.removeClass('active');
      }
    }
  }, {
    key: "checkSelect",
    value: function checkSelect(form) {
      var select = form.find('select');
      select.on('change', function (e) {
        var _this = $(this);

        var parent = _this.closest('.form-item, .filters__item');

        var val = _this.val();

        _this.closest('.valid').removeClass('error');

        if (val != 0) {
          parent.addClass('active');
        } else {
          parent.removeClass('active');
        }
      });
      select.on('focus', function (e) {
        $(this).closest('.form-item, .filters__item').addClass('open');
      });
      select.on('change', function (e) {
        $(this).closest('.form-item, .filters__item').removeClass('open');
      });
    }
  }, {
    key: "sendAjax",
    value: function sendAjax(form) {
      var _this2 = this;

      var data = form.serialize();
      $.ajax({
        type: "POST",
        url: "mail.php",
        data: data,
        success: function success(e) {
          _this2.thankForm(form);
        }
      });
    }
  }, {
    key: "thankForm",
    value: function thankForm(form, callBack) {
      var formThanks = $('.formThanks');
      if (!formThanks.length) return;
      formThanks.fadeIn();
      setTimeout(function () {
        formThanks.fadeOut(function () {
          form.fadeIn().find('.form-item').removeClass('active');
          form[0].reset();
          callBack(); //	formTitle.fadeIn();
        });
      }, 3000);
    }
  }, {
    key: "validInput",
    value: function validInput(form) {
      var formValid = form.find('.valid');
      var email = formValid.find('[type=email]');
      var bull;
      var textInError = '';
      bull = false;
      formValid.each(function (key) {
        var _this = $(formValid[key]);

        var formInput = _this.find('input');

        var formTextarea = _this.find('textarea');

        var select = _this.find('select');

        var formCheckbox = _this.find('[type="checkbox"]');

        checkForElem(formInput, function () {
          if (formInput.val().length < 1) {
            formInput.closest('.valid').addClass('error').removeClass('ok');
          } else {
            _this.closest('.valid').addClass('ok');
          }

          ;
        });
        checkForElem(formTextarea, function () {
          if (formTextarea.val().length < 1) {
            formTextarea.closest('.valid').addClass('error').removeClass('ok');
          } else {
            _this.closest('.valid').addClass('ok');
          }

          ;
        });
        checkForElem(select, function () {
          if (select.val() == 0) {
            select.closest('.valid').addClass('error').removeClass('ok');
          } else {
            _this.closest('.valid').addClass('ok');
          }

          ;
        });

        if (!formCheckbox.prop("checked")) {
          formCheckbox.closest('.valid').addClass('error').removeClass('ok');
        } else {
          _this.closest('.valid').removeClass('error').addClass('ok');
        }

        ;
      }); //	проверка на email

      if (email.length && !this.isEmail(email) && email.val().length > 1) {
        var parent = email.closest('.valid');
        parent.addClass('error').removeClass('ok');
        textInError += 'E-mail не корректен';
      }

      ;

      function checkForElem(input, f) {
        if (!input.length) {} else {
          f();
        }
      }

      ;

      if (form.find('.error').length) {
        return bull = false;
      } else {
        return bull = true;
      }
    }
  }, {
    key: "isEmail",
    value: function isEmail(email) {
      if (!email) return true;
      var valEmail = email.val();
      var reg = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      ;
      return reg.test(valEmail);
    }
  }]);

  return ValidForm;
}();

},{}],3:[function(require,module,exports){
"use strict";

function libsActivate() {
  // slick slider
  (function () {
    var lazyInit = function lazyInit() {
      var className = '.lazy';
      $(className).Lazy({
        visibleOnly: true
      });
    };

    lazyInit(); // new WOW().init();

    AOS.init({
      once: false,
      duration: 500,
      easing: 'easeInBack',
      disable: 'mobile'
    });

    var sectionBg = function sectionBg() {
      $('.works .item__img, .team__static, .team__prev, .partners__hover-img, .projects .item__img, .project__foot .next').each(function () {
        if ($(window).innerWidth() <= 1024) {
          $(this).attr('data-src', $(this).data('mob-src'));
        } else {
          $(this).attr('data-src', $(this).data('desk-src'));
        }
      });
    };

    $(window).on('resize', function () {
      lazyInit();
      sectionBg();
    });
    $(document).ready(function () {
      sectionBg();
    });

    var textAnimate = function textAnimate() {
      // console.clear();
      var baseUrl = "/img/lorem/";
      var maskSpeed = 0.1;
      var maskRadius = 175;
      var main = document.querySelector("#main"); // const text = document.querySelector("#text");

      var view = document.querySelector("#view");
      var app = new PIXI.Application({
        width: main.clientWidth,
        height: main.clientHeight,
        antialias: true,
        view: view
      });
      var screen = app.screen;
      var bgSize = new PIXI.Rectangle(0, 0, 700, 420);
      var pointer = new PIXI.Point(screen.width / 2, screen.height / 2);
      var mask = new PIXI.Graphics().beginFill(0xFFFFFF, 1).drawCircle(0, 0, maskRadius).endFill();
      var maskPosition = mask.position;
      var bulgeCenter = new PIXI.Point(0.5, 0.5);
      var bulgeFilter = new PIXI.filters.BulgePinchFilter(bulgeCenter, maskRadius, 0.2);
      var bgContainer = new PIXI.Container();
      var bgTexture = PIXI.Texture.fromImage("".concat(baseUrl, "main.jpg?v=1"));
      var bg1 = PIXI.Sprite.fromImage("".concat(baseUrl, "main.jpg?v=1"));
      bg1.alpha = 1;
      bg1.anchor.set(0.5);
      var bg2 = new PIXI.Sprite(bgTexture);
      bg2.alpha = 0;
      bg2.anchor.set(0.5);
      var bg3 = new PIXI.Sprite(bgTexture);
      bg3.anchor.set(0.5);
      bg3.filters = [bulgeFilter];
      bg3.filterArea = screen;
      bg3.mask = mask;
      bgContainer.addChild(bg1, bg2, bg3);
      var tl = new TimelineMax();
      buildTimeline();
      tl.reverse().timeScale(2);
      var resized = true;
      var updatePosition = true;
      app.stage.interactive = true;
      app.stage.filterArea = screen;
      app.stage.addChild(bgContainer, mask);
      app.stage.on("pointerdown", onPointerMove).on("pointermove", onPointerMove);
      app.ticker.add(onTick);
      window.addEventListener("resize", function () {
        return resized = true;
      }); // text.addEventListener("click", () => tl.reversed(!tl.reversed()));
      //
      // ON TICK
      // ===========================================================================

      function onTick(delta) {
        if (resized) {
          onResize();
          updatePosition = true;
          resized = false;
        }

        if (updatePosition) {
          var dx = pointer.x - maskPosition.x;
          var dy = pointer.y - maskPosition.y;

          if (Math.abs(dx) < 0.05 && Math.abs(dy) < 0.05) {
            maskPosition.copy(pointer);
            updatePosition = false;
          } else {
            var dt = 1 - Math.pow(1 - maskSpeed, delta);
            maskPosition.x += dx * dt;
            maskPosition.y += dy * dt;
          }

          bulgeCenter.x = maskPosition.x / screen.width;
          bulgeCenter.y = maskPosition.y / screen.height;
        }
      } //
      // ON RESIZE
      // ===========================================================================


      function onResize() {
        var width = main.clientWidth;
        var height = main.clientHeight;
        var scaleX = width / bgSize.width;
        var scaleY = height / bgSize.height;
        var scale = Math.max(scaleX, scaleY);
        app.renderer.resize(width, height);
        bgContainer.scale.set(scale);
        bgContainer.position.set(width / 2, height / 2);
        pointer.x = clamp(pointer.x, 0, width);
        pointer.y = clamp(pointer.y, 0, height);
        buildTimeline();
      } //
      // BUILD TIMELINE
      // ===========================================================================


      function buildTimeline() {
        var ease = Power3.easeInOut;
        var size = Math.sqrt(screen.width * screen.width + screen.height * screen.height);
        var scale = size / maskRadius;
        var progress = tl.progress() || 0;
        var reversed = tl.reversed() || false;
        tl.progress(0).clear().to(bulgeFilter, 3, {
          strength: 0,
          ease: ease
        }, 0).to(mask, 4, {
          pixi: {
            scale: scale
          },
          ease: ease
        }, 0).to(bg1, 2, {
          alpha: 0,
          ease: ease
        }, 2).to(bg2, 2, {
          alpha: 1,
          ease: ease
        }, 2).progress(progress).reversed(reversed);
      } //
      // ON POINTER MOVE
      // ===========================================================================


      function onPointerMove(eventData) {
        pointer.copy(eventData.data.global);
        updatePosition = true;
      }

      function clamp(value, min, max) {
        return value <= min ? min : value >= max ? max : value;
      }
    };

    $(document).ready(function () {
      if ($('body').hasClass('home-page') && $(window).innerWidth() >= 1024) {
        textAnimate();
      }
    });
  })();
}

module.exports = libsActivate();

},{}],4:[function(require,module,exports){
"use strict";

var Preloader = require('./preloader.js');

var Common = require('./common.js');

var Popup = require('./popup.js');

var Nav = require('./nav.js');

var ValidForm = require('./form');

require('./form');

require('./libs-activate');

window.addEventListener('load', function () {
  svg4everybody({});
  var preloader = new Preloader();
  preloader.init();
  var sendForm = new ValidForm('.sendForm').init();
  var nav = new Nav().init();
  var popup = new Popup().events();
  var common = new Common().init(); // let scrollAnchors = new Common().scrollAnchors('.anchorBtn', 65, function(){
  // 	$('body').removeClass('openNav')
  // });
});

},{"./common.js":1,"./form":2,"./libs-activate":3,"./nav.js":5,"./popup.js":6,"./preloader.js":7}],5:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = /*#__PURE__*/function () {
  function Nav() {
    _classCallCheck(this, Nav);

    this.body = $('body');
    this.hamburger = $('#hamburger');
    this.headerNav = $('.headerNav');
  }

  _createClass(Nav, [{
    key: "init",
    value: function init() {
      this.events();
    }
  }, {
    key: "events",
    value: function events() {
      var _this = this;

      this.hamburger.on('click', function () {
        if (_this.body.hasClass('openNav')) {
          _this.closeNav();

          $('body').removeClass('cf-open');
          $('.contact-form').removeClass('show');
        } else {
          _this.openNav();

          $('.contact-form').removeClass('show');
        }
      }); // this.headerNav.on('click', '.popupBtn', ()=> {
      // 	this.closeNav()
      // })
    }
  }, {
    key: "openNav",
    value: function openNav() {
      var _this2 = this;

      var openPromise = new Promise(function (resolve, regect) {
        _this2.body.addClass('openNav');

        setTimeout(resolve, 0);
      });
      openPromise.then(function () {
        _this2.headerNav.addClass('openNav');
      });
    }
  }, {
    key: "closeNav",
    value: function closeNav() {
      var _this3 = this;

      var closePromise = new Promise(function (resolve, regect) {
        _this3.headerNav.removeClass('openNav');

        setTimeout(resolve, 300);
      });
      closePromise.then(function () {
        _this3.body.removeClass('openNav');
      });
    }
  }]);

  return Nav;
}();

},{}],6:[function(require,module,exports){
'use strict'; // popup windows

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = /*#__PURE__*/function () {
  function GetPopup() {
    _classCallCheck(this, GetPopup);

    this.$ = jQuery;
    this.popupBtn = $('.popupBtn');
    this.popup = $('.popup');
    this.hash = window.location.hash;
    this.openPopup(this.hash);
  }

  _createClass(GetPopup, [{
    key: "events",
    value: function events() {
      var _this = this;

      var that = this;
      this.popupBtn.on('click', function (e) {
        e.preventDefault();
        var href = this.getAttribute('href');
        that.openPopup(href);
      });
      this.popup.on('click', '.close, .anchorBtn', function (e) {
        e.preventDefault();

        _this.closePopup();
      });
      document.addEventListener('keydown', function (e) {
        if (e.keyCode === 27) {
          _this.closePopup();
        }
      });
    }
  }, {
    key: "openPopup",
    value: function openPopup(href) {
      var popup = $(href);

      if (this.popup.hasClass('show_popap')) {
        popup = $('.show_popap');
      }

      ;
      if (!popup.length) return;
      document.body.classList.add('hidden');
      setTimeout(function () {
        popup.addClass('show_popup');
      }, 100);
    }
  }, {
    key: "closePopup",
    value: function closePopup() {
      var loc = window.location;
      this.popup.removeClass('show_popup');
      setTimeout(function () {
        document.body.classList.remove('hidden');
      }, 300);
      history.pushState('', '', loc.pathname + loc.search);
    }
  }]);

  return GetPopup;
}();

},{}],7:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = /*#__PURE__*/function () {
  function Preloader(loader) {
    _classCallCheck(this, Preloader);

    this.loader = document.querySelector('#preloader');
  }

  _createClass(Preloader, [{
    key: "init",
    value: function init() {
      var _this = this;

      $('.start__img').each(function () {
        if ($(window).innerWidth() > 1024) {
          $(this).attr('src', $(this).data('src'));
        }
      });
      document.body.classList.add('show');
      if (!this.loader) return;
      this.loader.classList.add('hide');
      setTimeout(function () {
        if (_this.loader.remove) {
          _this.loader.remove();
        }

        ;

        _this.loader.classList.add('remove');
      }, 2000);
    }
  }]);

  return Preloader;
}();

},{}]},{},[4]);

//# sourceMappingURL=main.js.map
